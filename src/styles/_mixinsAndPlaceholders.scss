//- This file will store all mixins and placeholders that have generic use

//- A placeholder for creating a stackable grid of elements. Particularly for making stacked input labels.
%stackedGrid {
  &.stacked {
    flex-direction: column-reverse;
    &.center > * {
      text-align: center;
    }
    &:not(.center) > * {
      text-align: left;
    }
    > [name] {
      width: 100%;
    }
  }
}
//- Some styling to highlight which input is currently being interacted with.
%inputHighlight {
  border-width: 1px 3px;
  border-style: solid;
  border-color: var(--borderColor);
  border-radius: 5px;
  box-sizing: border-box;
}
//- Placeholder that allows us to easily set a square aspect ratio
%ratio1_1 {
  aspect-ratio: 1/1;
}
//- Placeholder for applying grid display
%grid {
  display: grid;
}

//Our various fonts that can be used on the sheet. For now, these are all set to Arial until we find fonts we like, which won't be done until the very end.
%font-vars {
  --topHeaderFont: Arial;
  --midHeaderFont: Arial;
  --contentFont: Arial;
}

//- Placeholder for applying inline-grid display
%inline-grid {
  display: inline-grid;
}
//- Placeholder for creating circular shapes easily. Combined with %ratio1_1, makes a perfect circle.
%circle {
  border-radius: 50%;
}
//- Creates our basic border for inputs
@mixin base-border {
  border-width: 1px 3px;
  border-style: solid;
  border-radius: 5px;
  border-color: transparent;
  box-sizing: border-box;
}
//- Our basic button styling
%base-button {
  background-color: var(--buttonColor);
  border-radius: 5px;
  box-shadow: 0 2px 4px var(--shadowColor1), 0 2px 4px var(--shadowColor2);
  border-width: 0;
  color: var(--fontColor);
  transition: {
    property: box-shadow, backdrop-filter, background-color;
    duration: 200ms;
    timing-function: ease-out;
  }
  backdrop-filter: blur(1px);
  overflow: hidden;
  &:is(:hover, :focus) {
    background-color: var(--hoverColor);
    box-shadow: 0 4px 6px var(--shadowColor1), 0 4px 6px var(--shadowColor2);
    backdrop-filter: blur(2px);
  }
  &:active {
    background-color: var(--clickColor);
    box-shadow: 0 1px 2px var(--shadowColor1), 0 1px 2px var(--shadowColor2);
    backdrop-filter: blur(0px);
  }
}
//- Styling for our dice buttons
%die-button {
  @extend %base-button;
  line-height: 14px;
  /*height to vertically center a 2rem dicefontd10*/
  font-size: 2rem;
  font-weight: normal;
  font-style: normal;
  padding: 5px 3px 7px;
}
//- styling for buttons that have standard text in them
%text-button {
  padding: 5px 7px;
  @extend %base-button;
}
//- Styling for our adaptive text fields
@mixin adaptiveText {
  display: grid;
  grid-template-columns: auto;
  grid-template-rows: auto;
  grid-template-areas: "content";
  > * {
    grid-area: content;
  }
  > span {
    opacity: 0;
    z-index: -10;
    white-space: pre-wrap;
    @include base-border;
    text-transform: initial;
  }
  textarea {
    resize: none;
  }
}
//- Styling for items that need the pictos fonts
%pictos {
  font-family: pictos;
  text-transform: initial;
}
%pictos3 {
  font-family: pictos three;
  text-transform: initial;
}
%pictosCustom {
  font-family: pictos custom;
  text-transform: initial;
}

//- placeholder that can be used to apply uppercase letters to an element
@mixin uppercase {
  text-transform: uppercase;
}

//- Styling for our roll buttons
%roller {
  display: inline-flex;
  align-items: center;
  align-self: start;
  gap: var(--half-gap);
  &:before {
    content: "L";
    font-family: dicefontd6;
  }
}

//- Styling to hide elements
%hidden {
  display: none !important; //!important is usually a thing to avoid, but if we're applying this, we want it to be gone no matter what.
}

//- styling for italic words
%italics {
  font-style: italic;
}

@mixin baseText {
  color: var(--fontColor);
  line-height: normal;
}

//- Placeholder for applying our checked styling to something
@mixin checked {
  background-color: var(--selectedColor);
}

//- Styling for elements that should have a box around them
@mixin boxed {
  border: 1px solid var(--borderColor);
  border-radius: 0;
  box-sizing: border-box;
}
%universalVariables {
  --darkModeText: #c9a46d;
  --shadowColor1: rgba(0, 0, 0, 0.16);
  --shadowColor2: rgba(0, 0, 0, 0.23);
  --grid-gap: 1rem; //Variable to define our basic gap between layout elements. Followed by several gaps that are mathematically related to it.
  --half-gap: calc(var(--grid-gap) / 2);
  --tiny-gap: calc(var(--half-gap) / 2);
  --big-gap: calc(var(--grid-gap) * 2);

  --revealTime: 500ms; //Our basic reveal time for transitions
  --delayTime: 200ms; //Our basic delay time before a transition occurs
  --inputSwap: opacity var(--revealTime) ease var(--delayTime); //Transition properties for swapping the visibility of two elements
  --focusTiming: 500ms ease; //our basic timing for the transition used when an element is focused or hovered on
  --focusTrans: border-color var(--focusTiming), border-radius; //The full transition properties for focusing/hovering on an element
  --borderColor: black; //Our basic border color
  --fontColor: black; //Our basic font color
  --backColor: #ffffff; //Our basic background color
  --spanSectionColumn: 1/-1; //How a section should span when it is meant to span large numbers of columns (default span all)
  --displayBorderWidth: 2px; //Our default border width
  --subHeadBackColor: grey; //Our sub header background color
  --unselectedColor: lightgrey; //Our default font color for items that are currently inactive
  --selectedColor: black; //Our default font color for items that are currently active
  --disableBackground: lightgrey;
  --buttonColor: #dcdcdc33;
  --hoverColor: #85858580;
  --clickColor: #858585ff;
  //- Images
  --paper-background: url(https://s3.amazonaws.com/files.d20.io/images/273738927/iVQXAo_7WQUV4NsdhnhtHg/original.png);
  --star1Image: url(https://s3.amazonaws.com/files.d20.io/images/277891536/oALdRuUuOo8Qm9F6AvyKHg/original.png);
  --star2Image: url(https://s3.amazonaws.com/files.d20.io/images/277891537/m464cLZQk5gUMWX4eu-iXQ/original.png);
  --star3Image: url(https://s3.amazonaws.com/files.d20.io/images/277891538/hp7uVPvP7ep8kLr883kOyw/original.png);
}
//- Default styles. This Placeholder gets a little complicated. We're going to define several CSS variables in the first lines that will allow us to easily use the same layout principles across the sheet. Additionally, this placeholder is going to apply several styles to various elements. The reason we do this as a placeholder instead of directly in a class' CSS declaration is so that we can easily apply the same styling to our sheet as a whole and to the rolltemplate (note that many of these class specifications have versions prefixed and unprefixed with `.sheet-`
%defaultStyles {
  gap: var(--grid-gap);
  button {
    cursor: pointer;
  }
  :where(.uppercase, .sheet-uppercase) {
    text-transform: uppercase;
  }
  :where(.capitalize, .sheet-capitalize) {
    text-transform: capitalize;
  }
  :where(.flex-box, .sheet-flex-box) {
    display: flex;
  }
  :where(.space-around, .sheet-space-around) {
    justify-content: space-around;
  }
  :where(.space-between, .sheet-space-between) {
    justify-content: space-between;
  }
  :where(.center, .sheet-center) {
    place-self: center;
  }
  :where(.justify-start) {
    justify-self: flex-start;
  }
  :where(.justify-right, .justify-end) {
    justify-self: flex-end;
  }
  :where(.align-start) {
    align-self: flex-start;
  }
  :where(.align-end) {
    align-self: flex-end;
  }
  :where(textarea) {
    resize: vertical;
    min-height: 3.5rem;
    white-space: pre-wrap;
    &.fixed {
      resize: none;
      overflow: auto;
    }
  }
  :where(.span-2, .sheet-span-2) {
    grid-column: span 2;
  }
  :where(.span-all, .sheet-span-all) {
    grid-column: 1/-1;
  }
  :where(select, .pseudo-select span, .sheet-pseudo-select
      span, textarea, input:not(:is([type="radio"], [type="checkbox"])), .uneditable-input) {
    padding: 2px;
    font-size: 1rem;
    color: var(--fontColor);
  }
  :where(input:is([type="text"], [type="number"]), textarea) {
    cursor: auto;
  }
  :where(select, .pseudo-select span, .sheet-pseudo-select
      span, input:not(:where([type="checkbox"], [type="radio"])), .uneditable-input, textarea) {
    @include base-border;
  }
  :where(select, .sheet-pseudo-select span, .pseudo-select span) {
    -webkit-apperance: none;
    appearance: none;
    text-transform: capitalize;
    overflow: hidden !important;
    white-space: nowrap;
    text-overflow: ellipsis;
    text-align: center;
  }
  :where(input) {
    width: auto;
    &:placeholder {
      // color: #ededed80;
      color: var(--fontColor);
    }
    &.plus-control:not([value*="-"]) + span:before {
      content: "+";
    }
  }
  :where(span, input, textarea) {
    font-size: 1rem;
    @include baseText();
  }
  // :where(span[name], input, textarea, button, select) {
  //   font-family: var(--contentFont);
  //   --fontWght: 600;
  //   font-weight: var(--fontWght);
  //   font-variation-settings: "wght" var(--fontWght);
  // }
  :where(.sheet-hidden, .hidden, *[hidden]) {
    @extend %hidden;
  }
  :where(.sheet-italics, .italics) {
    @extend %italics;
  }

  :where(h1, h2, h3, h4, h5, [aria-level], h1 *, h2 *, h3 *, h4 *, h5
      *, [aria-level] *) {
    @include baseText();
    display: block;
    white-space: nowrap;
    margin-block: 0;
    font-weight: normal;
    font-size: var(--header-font-size, 1rem);
    font-family: var(--header-font-family, var(--midHeaderFont));
    &:not(:where(input)) {
      text-align: center;
      text-transform: capitalize;
    }
  }
  // Important Headers!
  :where(h1, h2, h3, [aria-level="1"], [aria-level="2"], [aria-level="3"], h1
      *, h2 *, h3 *, [aria-level="1"] *, [aria-level="2"] *, [aria-level="3"]
      *) {
    --header-font-family: var(--topHeaderFont);
    text-transform: uppercase;
    font-weight: normal;
  }
  :where(h1, [aria-level="1"], h1 *, [aria-level="1"] *) {
    --header-font-size: 2rem;
  }
  :where(h2, [aria-level="2"], h2 *, [aria-level="2"] *) {
    --header-font-size: 1.75rem;
    grid-area: header;
  }
  :where(h3, [aria-level="3"], h3 *, [aria-level="3"] *) {
    --header-font-size: 1.5rem;
  }
  :where(h4, [aria-level="4"], h4 *, [aria-level="4"] *) {
    --header-font-size: 1.25rem;
  }
  // :where(h5, [aria-level="5"], h5 *, [aria-level="5"] *) {
  //   font-style: normal;
  // }

  :where(input[type="checkbox"], input[type="radio"]) {
    align-self: center;
    border: 1px solid var(--borderColor);
    cursor: pointer;
    width: 1rem;
    display: inline-block;
    aspect-ratio: 1/1;
    &:checked {
      @include checked;
    }
  }
  :where(input[type="radio"]) {
    appearance: radio;
  }
  :where(input[type="number"]) {
    width: 3rem;
    -moz-appearance: textfield !important;
    appearance: textfield;
    text-align: center;
    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      appearance: none;
      -webkit-appearance: none;
      margin: 0;
    }
  }
  // input {
  //   &[type="checkbox"] {
  //   }
  //   &[type="radio"] {
  //     appearance: radio;
  //   }
  //   &[type="number"] {
  //     width: 3rem;
  //     -moz-appearance: textfield !important;
  //     text-align: center;
  //     &::-webkit-inner-spin-button,
  //     &::-webkit-outer-spin-button {
  //       -webkit-appearance: none;
  //       margin: 0;
  //     }
  //   }
  // }
  :where(.sheet-number, .number) {
    width: 2rem;
    box-sizing: border-box;
  }
  :where(section, header, footer) {
    align-self: start;
    display: grid;
    gap: var(--half-gap);
    &.page {
      display: none;
    }
    &.inactive {
      display: none !important;
    }
  }
  :where(.nav-display:not(.active), .inactive) {
    display: none !important;
  }

  :is(.sheet-pictos, .pictos) {
    @extend %pictos;
  }
  :is(.pictos3, .sheet-pictos3) {
    @extend %pictos3;
  }
  :is(.pictoscustom, .sheet-pictoscustom) {
    @extend %pictosCustom;
  }
  :where(.pseudo-button) {
    display: inline;
    cursor: pointer;
    border-radius: 5px;
    text-transform: uppercase;
    border: 1px solid var(--borderColor);
    text-align: center;
    padding: 0 5px;
    &:where(:hover, :focus-within) {
      background-color: var(--selectedColor);
      color: var(--backColor);
    }
  }
  :where(.input-label) {
    display: inline-flex;
    gap: var(--half-gap);
    align-items: center;
    @extend %stackedGrid;
    &:not(.stacked) {
      > [name]:not([type="number"], [type="checkbox"], [type="radio"]) {
        width: 0;
        flex: 1 1 0;
      }
      > :not([name]) {
        flex: 0 0 auto;
      }
      &.large > [name] {
        @extend h2;
      }
    }
  }
  .input-label--dual {
    grid-template-columns: 1fr auto 1fr;
    grid-template-areas: "over 	over 	over" "under 	under 	under";
    > span:last-of-type {
      grid-column: 1 / -1;
    }
    > input {
      width: 100%;
    }
    > .slash {
      line-height: 0rem;
      font-weight: normal;
    }
  }
  .headed-textarea {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: auto;
    h5 {
      justify-self: start;
    }
  }
  .adaptive--text {
    @include adaptiveText;
  }
  :where(.boxed, .sheet-boxed) {
    @include boxed;
    &.thick-left {
      border-left-width: 5px;
    }
    &.thick-bottom {
      border-bottom-width: 5px;
    }
    &.thick-right {
      border-right-width: 5px;
    }
    &.thick-top {
      border-top-width: 5px;
    }
  }
  :where(.underlined, .sheet-underlined) {
    border-radius: 0;
    border-bottom: 1px solid var(--borderColor);
    transition: var(--focusTrans);
  }
  :where(.underlined, .boxed) {
    &:not(:is([readonly], div)):is(:hover, :focus, :focus-within) {
      @extend %inputHighlight;
    }
    &:not([readonly]):is(:focus, :focus-within) {
      background-color: #dcdcdc;
      transition: var(--focusTrans);
    }
  }
  :where(.ratio1-1, .sheet-ratio1-1) {
    @extend %ratio1_1;
  }
  :where(.short-text, .sheet-short-text) {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    text-transform: initial;
  }
  .roll-container {
    display: grid;
    align-self: center;
    opacity: 0;
    grid-row: 1 / 2;
  }
  .repitem {
    > input:not([type="checkbox"], [type="number"], [type="radio"]) {
      width: 100%;
    }
    .headed-textarea {
      grid-column: 1/-1;
    }
    .collapse {
      opacity: 0;
      position: absolute;
      right: -10px;
      top: 0px;
      border: 0px solid black;
      border-radius: 0;
      color: var(--selectedColor);
      text-transform: none;
      &:before {
        content: "y";
        font-family: pictos;
      }
      &:checked {
        background-color: transparent;
        color: var(--unselectedColor);
        ~ :where(.expanded, .expanded-container
            .expanded, .expanded--empty:where(:not([value]), [value=""]) + *) {
          display: none;
        }
        // ~ .expanded--empty:is(:not([value]), [value=""]) + * {
        //   display: none;
        // }
      }
      &:hover {
        color: var(--selectedColor);
      }
    }
    &:hover {
      .collapse,
      .roll-container {
        opacity: 1;
      }
    }
  }
  .repcontainer.editmode {
    .collapse {
      display: none;
    }
  }
  .repcontainer {
    display: grid;
    gap: var(--half-gap);
  }
  .repeating-container {
    grid-template-areas: "header";
    h3 {
      grid-area: header;
    }
    &:is(:hover, :focus-within, :focus) .repcontrol-button {
      opacity: 1;
    }
  }
  .repcontrol-button {
    @extend %text-button;
    grid-area: header;
    align-self: center;
    text-transform: none;
    opacity: 0;
    transition: {
      property: background-color, opacity;
      duration: var(--revealTime);
    }
    ~ .repcontrol {
      display: none;
    }
  }
  .repcontrol-button--add {
    justify-self: start;
    &:before {
      font-family: pictos;
      content: "&";
    }
  }
  .repcontrol-button--edit {
    justify-self: end;
    &:before {
      font-family: pictos;
      content: "p";
    }
  }
  .sheet-box,
  .box {
    border-radius: 0;
    width: 10px;
    height: 10px;
  }
}
